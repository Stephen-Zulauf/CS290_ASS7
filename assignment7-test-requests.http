@INVALID_USER_ID = 369b336b8c8867f2cc165159
@GRAY_USER_ID = 6727fae94d5fb5df78e375f4

### NOTE: Replace the value of the variable GRAY_USER_ID with the value
###     of "_id" in the response to the following request, i.e., Request 1.
###     Don't change the value of the variable INVALID_USER_ID

### Request 1: Create a user
### Response
### Status Code: 201
### Body: JSON for the newly created user
POST http://localhost:3000/users HTTP/1.1
content-type: application/json

{
    "name": "Cher Gray",
    "age": 27,
    "email": "cher@example.com",
    "phoneNumber": 8114482
}

### Request 2: Create a user
### Response
### Status Code: 201
### Body: JSON for the newly created user
POST http://localhost:3000/users HTTP/1.1
content-type: application/json

{
    "name": "Ava Walker",
    "age": 27,
    "email": "ava.walker@example.com",
    "phoneNumber": 6505848540
}

### Request 3: Create a user
### Response
### Status Code: 201
### Body: JSON for the newly created user
POST http://localhost:3000/users HTTP/1.1
content-type: application/json

{
    "name": "Arnold Owens",
    "age": 24,
    "email": "arnold.owens@example.com",
    "phoneNumber": 7074540929
}

### Request 4: Create a user
### Response
### Status Code: 201
### Body: JSON for the newly created user
POST http://localhost:3000/users HTTP/1.1
content-type: application/json

{
    "name": "Javier Sanders",
    "age": 61,
    "email": "javier.sanders@example.com"
}

### Request 5: Create a user
### Response
### Status Code: 201
### Body: JSON for the newly created user
POST http://localhost:3000/users HTTP/1.1
content-type: application/json

{
    "name": "Bobby Hamilton",
    "age": 27,
    "email": "bobby.hamilton@example.com",
    "phoneNumber": 16817174606
}

### Request 6: Create a user
### Response
### Status Code: 201
### Body: JSON for the newly created user
POST http://localhost:3000/users HTTP/1.1
content-type: application/json

{
    "name": "Brett Jimenez",
    "age": 65,
    "email": "brett.jimenez@example.com",
    "phoneNumber": 3703831407
}

### Request 7: Retrieve all
### Response
### Status Code: 200 
### Body: An array with 6 users
GET http://localhost:3000/users HTTP/1.1

### Request 8: Retrieve by name
### Response
### Status Code: 200 
### Body: An array with 1 user
GET http://localhost:3000/users?name=Bobby Hamilton HTTP/1.1

### Request 9: Retrieve by email
### Response
### Status Code: 200 
### Body: An array with 1 user
GET http://localhost:3000/users?email=cher@example.com HTTP/1.1

### Request 10: Retrieve by age
### Response
### Status Code: 200 
### Body: An array with 3 users
GET http://localhost:3000/users?age=27 HTTP/1.1

### Request 11: Retrieve by phoneNumber
### Response
### Status Code: 200 
### Body: An array with 1 user, Cher Gray
GET http://localhost:3000/users?phoneNumber=8114482 HTTP/1.1

### Request 12: Retrieve by age and phoneNumber
### Response
### Status Code: 200 
### Body: An array with 1 user, Cher Gray
GET http://localhost:3000/users?age=27&phoneNumber=8114482 HTTP/1.1

### Request 13: Retrieve by name, age, email and phoneNumber
### Response
### Status Code: 200 
### Body: An array with 1 user, Cher Gray
GET http://localhost:3000/users?name=Cher Gray&age=27&email=cher@example.com&phoneNumber=8114482 HTTP/1.1


### Request 14: Retrieve by age and phoneNumber
### Response
### Status Code: 200 
### Body: An empty array
GET http://localhost:3000/users?age=28&phoneNumber=8114482 HTTP/1.1


### Request 15: Retrieve by _id
### Response
### Status Code: 200 
### Body: JSON for user Cher Gray with at least the properties: 
###         _id, name, age, email, phoneNumber.
###     Optionally the property _v can be included
GET http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1

### Request 16: Retrieve by _id, non-existent user
### Response
### Status Code: 404
### Body: {"Error": "Not found"}
GET http://localhost:3000/users/{{INVALID_USER_ID}} HTTP/1.1


### Request 17: Update user Cher Gray, 2 properties in request
### Response
### Status Code: 200
### Body: JSON for user Cher Gray with at least the properties: 
###         _id, name, age, email, phoneNumber.
###     Optionally the property _v can be included
###     Verify that age is 28 and phoneNumber is 12193456
###     The properties name (Cher Gray) and email (cher@example.com) must be unchanged
PUT http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1
content-type: application/json

{
    "age": 28,
    "phoneNumber": 12193456
}

### Request 18: Retrieve by _id
### Response
### Status Code: 200 
### Body: JSON for user Cher Gray with at least the properties: 
###         _id, name, age, email, phoneNumber.
###     Optionally the property _v can be included
###     Verify that age is 28 and phoneNumber is 12193456
###     name (Cher Gray) and email (cher@example.com) must be unchanged
GET http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1


### Request 19: Update user Cher Gray, all properties in request
### Response
### Status Code: 200
### Body: JSON for user Cher Gray with at least the properties: 
###         _id, name, age, email, phoneNumber.
###     Optionally the property _v can be included
###     Verify that phoneNumber is 6114382
###     name (Cher Gray), age (28) and email (cher@example.com) must be unchanged
PUT http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1
content-type: application/json

{
    "name": "Cher Gray",
    "age": 28,
    "email": "cher@example.com",
    "phoneNumber": 6114382
}

### Request 20: Retrieve by _id
### Response
### Status Code: 200 
### Body: JSON for user Cher Gray with at least the properties: 
###         _id, name, age, email, phoneNumber.
###     Optionally the property _v can be included
###     Verify that phoneNumber is 6114382
###     name (Cher Gray), age (28) and email (cher@example.com) must be unchanged
GET http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1


### Request 21: Update using non-existent _id
### Response
### Status Code: 404
### Body: {"Error": "Not found"}
PUT http://localhost:3000/users/{{INVALID_USER_ID}} HTTP/1.1
content-type: application/json

{
    "age": 28,
    "phoneNumber": 12193456
}

### Request 22: Delete by _id
### Response
### Status Code: 204
### Body: Empty
DELETE http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1

### Request 23: Delete by _id just deleted
### Response
### Status Code: 404
### Body: {"Error": "Not found"}
DELETE http://localhost:3000/users/{{GRAY_USER_ID}} HTTP/1.1

### Request 24: Delete by name
### Response
### Status Code: 200
### Body: {"deletedCount" : 1}
DELETE http://localhost:3000/users?name=Javier Sanders HTTP/1.1

### Request 25: Delete by age
### Response
### Status Code: 200
### Body: {"deletedCount" : 2}
DELETE http://localhost:3000/users?age=27 HTTP/1.1

### Request 26: Retrieve by age
### Response
### Status Code: 200 
### Body: An empty array
GET http://localhost:3000/users?age=27 HTTP/1.1

### Request 27: Delete by email
### Response
### Status Code: 200
### Body: {"deletedCount" : 1}
DELETE http://localhost:3000/users?email=arnold.owens@example.com HTTP/1.1

### Request 28: Delete by phoneNumber
### Response
### Status Code: 200
### Body: {"deletedCount" : 1}
DELETE http://localhost:3000/users?phoneNumber=3703831407 HTTP/1.1

### Request 29: Retrieve all users
### Response
### Status Code: 200 
### Body: An empty array
GET http://localhost:3000/users HTTP/1.1
